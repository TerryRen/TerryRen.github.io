<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The Sound of Music</title>
    <link>https://terryren.github.io/posts/</link>
    <description>Recent content in Posts on The Sound of Music</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Terry</copyright>
    <lastBuildDate>Mon, 26 Aug 2024 13:56:00 +0800</lastBuildDate><atom:link href="https://terryren.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>APISIX - 2 - 网关优化</title>
      <link>https://terryren.github.io/posts/web/nginx/apisix-2/</link>
      <pubDate>Mon, 26 Aug 2024 13:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/web/nginx/apisix-2/</guid>
      <description>前置条件 已安装 Docker，Docker Compose 用于部署 etcd 和 APISIX 已安装 curl，用于验证 APISIX 是否安装成功 采用 APISIX 的 3.2.2 LTS 长期支持版本，APISIX Dashboard 的 3.0.0 版本，etcd 的 3.5.11 版本 配置 APISIX 固定 IP 桥接模式 配置 APISIX 绑定到 443 &amp;amp; 80 端口；
安装 1. 下载文件 初始化相关配置，添加 apisix-dashboard 配置文件夹 dashboard_conf 以及文件
cd ~ git clone https://github.com/apache/apisix-docker.git cd apisix-docker/example mkdir dashboard_conf cd ~ cp apisix-docker/all-in-one/apisix-dashboard/conf.yaml apisix-docker/example/dashboard_conf mkdir apisix cp -r apisix-docker/example/* apisix rm -rf apisix-docker 2. apisix-dashboard 注意修改 conf.</description>
    </item>
    
    <item>
      <title>Debian12 Docker - 安装 - 优化</title>
      <link>https://terryren.github.io/posts/architect/basis/debian-docker-1/</link>
      <pubDate>Wed, 24 Jul 2024 13:06:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/architect/basis/debian-docker-1/</guid>
      <description>1 - 安装 Debian 12 通过 https://www.osboxes.org/debian/ 下载 适配 Vmware 的OS镜像
查看 OS Info
uname -a lsb_release -a cat /etc/os-release 修改 APT 源
vi /etc/apt/sources.list 修改内容
# Tsinghua University deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware 更新源
sudo apt update 2 - 安装Docker &amp;amp; Docker Compose CE版本 export https_proxy=&amp;#34;http://127.0.0.1:8118&amp;#34; export http_proxy=&amp;#34;http://127.</description>
    </item>
    
    <item>
      <title>Discuz - 安装 - 优化</title>
      <link>https://terryren.github.io/posts/architect/basis/discuz-1/</link>
      <pubDate>Tue, 23 Jul 2024 13:06:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/architect/basis/discuz-1/</guid>
      <description>1 - Install Docker &amp;amp; Mysql 5.7 创建Mysql数据库 {PWD} 修改成实际密码
CREATE DATABASE discuz; GRANT ALL PRIVILEGES ON discuz.* TO &amp;#39;discuz&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;{PWD}&amp;#39;; FLUSH PRIVILEGES; 2 - Pull the Discuz Docker Image Discuz! X3.5 Release 20230726 UTF-8
注意设置Docker Sock5代理 需要访问 hub.docker.com 国内很多镜像网站下载失败，腾讯云服务器可直接获取
docker pull tencentci/discuz:latest 3 - 创建本地磁盘目录 mkdir -p /mnt/discuz/www 4 - 创建文件 docker-compose.yaml version: &amp;#39;3&amp;#39; services: web: image: tencentci/discuz:latest container_name: discuz ports: - &amp;#34;28080:80&amp;#34; volumes: - discuz-www:/var/www/html restart: always volumes: discuz-www: driver: local driver_opts: type: none o: bind device: /mnt/discuz/www 通过命令 检查Docker Volumn</description>
    </item>
    
    <item>
      <title>Minio - 安装 - 优化</title>
      <link>https://terryren.github.io/posts/architect/io/minio-install-1/</link>
      <pubDate>Tue, 16 Jul 2024 13:06:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/architect/io/minio-install-1/</guid>
      <description>1 - Install Docker 2 - Pull the MinIO Docker Image docker pull minio/minio:latest 3 - Create Docker Compose File 通过如下内容，修改账户 + 密码，然后创建 docker-compose.yml 文件
version: &amp;#39;3&amp;#39; services: minio: image: minio/minio:latest container_name: minio ports: - &amp;#34;9000:9000&amp;#34; - &amp;#34;9001:9001&amp;#34; environment: MINIO_ROOT_USER: {user} MINIO_ROOT_PASSWORD: {user-password} volumes: - ~/minio/data:/data - ~/minio/config:/root/.minio command: server --address &amp;#34;0.0.0.0:9000&amp;#34; --console-address &amp;#34;0.0.0.0:9001&amp;#34; /data restart: always 4 - Run Docker Compose #docker-compose down docker-compose up -d 5 - Access MinIO Open your web browser and navigate to http://:9001.</description>
    </item>
    
    <item>
      <title>Anaconda - 安装 - 优化</title>
      <link>https://terryren.github.io/posts/architect/ai/anaconda/</link>
      <pubDate>Wed, 24 Apr 2024 13:06:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/architect/ai/anaconda/</guid>
      <description>conda configure navigator 通过 Anaconda Navigator UI 修改
configure conda conda配置 默认地址 %Home%/.condarc，可修改配置添加代理
channels: - defaults show_channel_urls: true ssl_verify: false proxy_servers: http: http://127.0.0.1:8118 https: http://127.0.0.1:8118 查看版本 conda --version 查看环境 conda env list 创建环境 conda create --name jira python=3.6 激活环境 conda activate jira 查看配置 conda config --show 安装包 conda install jupyter notebook conda install numpy=1.10 conda remove numpy conda search &amp;#39;*beautifulsoup*&amp;#39; 安装插件 jupyterlab_code_formatter 代码格式化插件
conda install -c conda-forge jupyterlab_code_formatter conda uninstall jupyterlab_code_formatter Juputer-lab 配置 jupyter-lab --generate-config 配置文件 %Home%/.</description>
    </item>
    
    <item>
      <title>Mysql Locks</title>
      <link>https://terryren.github.io/posts/db/mysql/mysql-lock-1/</link>
      <pubDate>Fri, 29 Mar 2024 09:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/db/mysql/mysql-lock-1/</guid>
      <description>Record Locks (记录锁) 事务 - 1 事务隔离级别 == REPEATABLE READ
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ; START TRANSACTION; UPDATE tt_order_item SET Deleted = 1, Version = Version + 1 WHERE OrderNumber = &amp;#39;17111803861711180386&amp;#39;; COMMIT 事务 - 2 事务隔离级别 == REPEATABLE READ
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ; START TRANSACTION; UPDATE tt_order_item SET Deleted = 0, Version = Version + 1 WHERE OrderNumber = &amp;#39;17111803861711180386&amp;#39;; COMMIT 事务 - 3 事务隔离级别 == READ COMMITTED</description>
    </item>
    
    <item>
      <title>JDBC Mysql 时区问题</title>
      <link>https://terryren.github.io/posts/lang/java/jdbc-mysql-1/</link>
      <pubDate>Tue, 12 Mar 2024 09:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/lang/java/jdbc-mysql-1/</guid>
      <description>JDBC 链接 Mysql 提示：时区不识别 错误日志 c.m.c.e.InvalidConnectionAttributeException: The server time zone value &amp;#39;PDT&amp;#39; is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specific time zone value if you want to utilize time zone support. 原因 由于 Client 端连接字符串没有设置 serverTimezone=America/Los_Angeles 参数, 同时 Mysql 端也没有设置时区 time_zone, 此时 Mysql 采用 OS 操作系统 的 system_time_zone, 当这个值无法被 JDBC SDK 识别时，就会提示如上错误</description>
    </item>
    
    <item>
      <title>JDK 多版本 安装</title>
      <link>https://terryren.github.io/posts/lang/java/jdk/</link>
      <pubDate>Fri, 08 Mar 2024 13:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/lang/java/jdk/</guid>
      <description>MacOS 查看 JDK 版本
/usr/libexec/java_home -V
协助 Oracle jdk 8
sudo rm -rf /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin sudo rm -rf /Library/PreferencePanes/JavaControlPanel.prefPane # 进入 JDK 目录 cd /Library/Java/JavaVirtualMachines # 查看所有JDK ls sudo rm -rf /Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk sudo rm -rf /Library/Java/JavaVirtualMachines/openjdk.jdk # 移除环境变量 &amp;amp; 并生效 cd ~ code .bash_profile source .bash_profile 通过 brew 卸载 open jdk
brew uninstall openjdk@8 brew uninstall openjdk@17 通过 brew 安装 open jdk
brew install openjdk@8 brew install openjdk@17 java 安装 目录</description>
    </item>
    
    <item>
      <title>GIT 设置 socks5 代理</title>
      <link>https://terryren.github.io/posts/lang/shell/git-proxy-1/</link>
      <pubDate>Sat, 02 Mar 2024 15:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/lang/shell/git-proxy-1/</guid>
      <description>Http代理，容易受到DNS污染；建议Socks5代理
http/https 模式 全局代理 设置
git config --global http.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; git config --global https.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; 取消
git config --global --unset http.proxy git config --global --unset https.proxy github.com 专用代理 设置
git config --global http.https://github.com.proxy socks5://127.0.0.1:1080 {home}/.gitconfig 文件变化
[http &amp;#34;https://github.com&amp;#34;] proxy = socks5://127.0.0.1:1080 取消
git config --global --unset http.https://github.com.proxy ssh 模式 windows 新增 或者 修改 此文件 {home}/.ssh/config
文件内容-添加
# Read more about SSH config files: https://linux.die.net/man/5/ssh_config Host github.com User git Hostname github.com Port 22 TCPKeepAlive yes # 注意修改为您的 SSH 密钥文件的路径 IdentityFile &amp;#34;C:\Users\{you_name}\.</description>
    </item>
    
    <item>
      <title>Vue Vben Admin - 入坑记</title>
      <link>https://terryren.github.io/posts/lang/nodejs/vue-vben-admin-1/</link>
      <pubDate>Fri, 01 Mar 2024 16:06:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/lang/nodejs/vue-vben-admin-1/</guid>
      <description>官方文档
简介
入坑记
PNPM 安装
安装 时, 指定安装源 pnpm install --registry https://registry.npmmirror.com
启动 时，提示 400（Error: Request failed with status code 400） 参考Issue
修改 package.json
{ &amp;#34;scripts&amp;#34;: { // 其他配置... &amp;#34;dev&amp;#34;: &amp;#34;vite --https false&amp;#34;, // 其他配置... } } 提交 时，注意git commit规范 </description>
    </item>
    
    <item>
      <title>PNPM - 安装 - 优化</title>
      <link>https://terryren.github.io/posts/lang/nodejs/pnpm-install-1/</link>
      <pubDate>Fri, 01 Mar 2024 10:06:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/lang/nodejs/pnpm-install-1/</guid>
      <description>windows 平台shell
nvm install v16.20.2 nvm use v16.20.2 npm install -g pnpm MacOS 平台Shell
brew install pnpm 修改用户全局配置文件 ${home}/.npmrc ，设置 store-dir 目录，其他配置与NPM共用
store-dir=D:\AppData\pnpm 查看 pnpm config list
安装 pnpm install or pnpm install --registry https://registry.npmmirror.com
运行 pnpm serve
打包 pnpm build
参考文档
PNPM 安装
PNPM 使用
PNPM 配置优化
NODE 优化 教程</description>
    </item>
    
    <item>
      <title>Node - 安装 - 优化</title>
      <link>https://terryren.github.io/posts/lang/nodejs/node-install-1/</link>
      <pubDate>Sat, 03 Feb 2024 16:06:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/lang/nodejs/node-install-1/</guid>
      <description>存储优化
windows 平台shell，修改采用加速地址，调整 registry，cache，prefix 全局包目录;
npm config get registry npm config set registry {registry} echo %AppData% npm config get prefix npm config set prefix D:\AppData\npm npm config get cache npm config set cache D:\AppData\npm-cache @RD /S /Q &amp;#34;C:\Users\xxx\AppData\Roaming\npm&amp;#34; @RD /S /Q &amp;#34;C:\Users\xxx\AppData\Roaming\npm-cache&amp;#34; registry hosts
淘宝镜像地址
腾讯云镜像地址
华为云镜像地址
添加路径 D:\AppData\npm 到环境变量 PATH ，全局安装的命令才能生效
查看 npm config list or npm install --registry https://registry.npmmirror.com
用户全局配置文件 ${home}/.npmrc 参考如下：
registry=https://{hosts}/artifactory/api/npm/ sass_binary_site=https://{hosts}/artifactory/node-sass-remote/download/ _auth=&amp;#34;{basic auth}&amp;#34; email=xxx@yyy.zzz always-auth=true prefix=D:\AppData\npm cache=D:\AppData\npm-cache NVM 注意事项</description>
    </item>
    
    <item>
      <title>Windows - 系统 - 垃圾清理 - 脚本</title>
      <link>https://terryren.github.io/posts/lang/shell/win/bat-clear-1/</link>
      <pubDate>Sat, 03 Feb 2024 15:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/lang/shell/win/bat-clear-1/</guid>
      <description>清理系统垃圾
@echo off echo 正在清除系统垃圾文件，请稍等...... del /f /s /q %systemdrive%\Windows\Temp\*.* del /f /s /q %systemdrive%\Windows\ServiceProfiles\NetworkService\AppData\Local\Temp\*.* del /f /s /q %systemdrive%\Windows\ServiceProfiles\LocalService\AppData\Local\Temp\*.* del /f /s /q %systemdrive%\*._mp del /f /s /q %systemdrive%\*.log del /f /s /q %systemdrive%\*.gid del /f /s /q %systemdrive%\*.chk del /f /s /q %systemdrive%\*.old del /f /s /q %systemdrive%\recycled\*.* del /f /s /q %windir%\*.bak del /f /s /q %windir%\prefetch\*.* rd /s /q %windir%\temp &amp;amp; md %windir%\temp del /f /q %userprofile%\cookies\*.</description>
    </item>
    
    <item>
      <title>Maven - 优化</title>
      <link>https://terryren.github.io/posts/lang/java/maven/</link>
      <pubDate>Sat, 03 Feb 2024 13:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/lang/java/maven/</guid>
      <description>优化本地仓库地址
默认情况下，Maven本地包存放在${home}/.m2/repository，一般在Windows系统的C盘，会影响系统性能，建议迁移到其他磁盘
修改repository配置，可采用aliyun等加速网站</description>
    </item>
    
    <item>
      <title>APISIX - 1 - 网关搭建</title>
      <link>https://terryren.github.io/posts/web/nginx/apisix-1/</link>
      <pubDate>Thu, 01 Feb 2024 13:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/web/nginx/apisix-1/</guid>
      <description>前置条件 已安装 Docker，Docker Compose 用于部署 etcd 和 APISIX 已安装 curl，用于验证 APISIX 是否安装成功
安装 1. 下载文件 初始化相关配置，添加apisix-dashboard配置文件夹以及文件
cd ~ git clone https://github.com/apache/apisix-docker.git cd apisix-docker/example mkdir dashboard_conf cd ~ cp apisix-docker/all-in-one/apisix-dashboard/conf.yaml apisix-docker/example/dashboard_conf mkdir apisix cp -r apisix-docker/example/* apisix rm -rf apisix-docker 2. apisix-dashboard 注意修改conf.etcd.endpoints为apisix可访问的地址
dashboard_conf/config.yaml，内容如下：
# # Licensed to the Apache Software Foundation (ASF) under one or more # contributor license agreements. See the NOTICE file distributed with # this work for additional information regarding copyright ownership.</description>
    </item>
    
    <item>
      <title>密码学 - 数字证书</title>
      <link>https://terryren.github.io/posts/web/crypto/certification/</link>
      <pubDate>Sat, 14 Oct 2023 13:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/web/crypto/certification/</guid>
      <description>PKI 公开密钥基础建设（Public Key Infrastructure），是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书， 从而建立一个安全的网络环境，数字证书最常见的格式有X.509，X.509又称之为PKIX。 在计算机界，有各种密码学标准，它们表示了如何在计算机中计算、存储、传输（等）各种算法，这些标准由 RSA、IEFT、PKIX、ITU-T、ISO 等标准组织机构编写, CA中心普遍采用的规范是X.509系列和PKCS系列
CA 证书颁发机构
CSR 证书签名请求
CRL 证书吊销列表
OCSP 在线证书状态协议
PKCS 公钥私钥加密-密码学标准（Public Key Cryptography Standards, PKCS），此一标准的设计与发布皆由 RSA 资讯安全公司（英语：RSA Security）所制定 包括了证书申请、证书更新、证书作废表发布、扩展证书内容以及数字签名、数字信封的格式等方面的一系列相关协议。它定义了一系列从PKCS#1到PKCS#15的标准
pkcs1 PKCS #1，RSA Cryptography Standard，定义了RSA Public Key和Private Key数学属性和格式，详见RFC8017 定义了RSA的数理基础、公/私钥格式，以及加/解密、签/验章的流程。1.5版本曾经遭到攻击
openssl genrsa -out key.pem Private Key Format
-----BEGIN RSA PRIVATE KEY----- BASE64Encoded -----END RSA PRIVATE KEY----- Public Key Format
-----BEGIN RSA PUBLIC KEY----- BASE64Encoded -----END RSA PUBLIC KEY----- pkcs7 参见RFC 2315。规范了以公开密钥基础设施（PKI）所产生之签名/密文之格式。其目的一样是为了拓展数字证书的应用。 其中，包含了S/MIME与CMS。 主要用来存储签名或者加密后的数据,如证书或者CRL。 PKCS7可以用二进制的DER格式存储，也可以使用PEM格式存储。Windows中PKCS7通常使用.p7b文件扩展名</description>
    </item>
    
    <item>
      <title>英语时态</title>
      <link>https://terryren.github.io/posts/misc/english/grammar/verb-tenses/</link>
      <pubDate>Sat, 12 Aug 2023 15:19:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/misc/english/grammar/verb-tenses/</guid>
      <description>12 Tensens
Simple Continuous Perfect Perfect Continuous Past 1.1 1.2 1.3 1.4 Present 2.1 2.2 2.3 2.4 Future 3.1 3.2 3.3 3.4 1 Past What happened.
1.1 Past Simple Summary
We use the past simple to talk about something that happened at a specific time in the past.
We can&amp;rsquo;t change it.
We often use or imply expressions like yesterday, last week, last month.
Form
For All The People
sound like /t/ or /id/</description>
    </item>
    
    <item>
      <title>一周减脂餐</title>
      <link>https://terryren.github.io/posts/misc/health/health-eat-1/</link>
      <pubDate>Tue, 04 Apr 2023 14:38:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/misc/health/health-eat-1/</guid>
      <description> 中午工作餐，一碗米饭，油腻少吃
星期一 早餐 1杯牛奶 2片全麦面包 1个水煮蛋 | 五谷膳食 晚餐 1份蔬菜 | 1个玉米 苹果 星期二 早餐 五谷杂粮 (大米 | 小麦 | 高粱 | 大豆 | 玉米) 晚餐 1地瓜 橙子 星期三 早餐 1杯牛奶 1个蒸玉米 1个水煮蛋 | 荷包蛋 晚餐 1份蔬份菜 1份山药泥 鸭梨 星期四 早餐 1大米粥 1个包子 1个水煮蛋 晚餐 1份土豆泥 火龙果 橘子 星期五 早餐 1杯牛奶 1份煎鸡蛋 1个地瓜 | 南瓜 晚餐 1份五谷杂粮 猕猴桃 星期六 早餐 1杯牛奶 1份煎鸡蛋 1个地瓜 | 南瓜 晚餐 1个玉米 1份蔬份菜 核桃 | 杏仁 火龙果 星期日 早餐 1份纯燕麦片 1份煎鸡蛋 1个地瓜 | 南瓜 午餐 白虾 | 基围虾 2份蔬份菜 晚餐 1个玉米 1份蔬份菜 橙子 火龙果 </description>
    </item>
    
    <item>
      <title>中国历史纪年简表</title>
      <link>https://terryren.github.io/posts/misc/his/his-table/</link>
      <pubDate>Mon, 03 Apr 2023 15:19:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/misc/his/his-table/</guid>
      <description>三皇五帝 伏羲 炎帝 黄帝 尧 舜 夏 禹之子启建夏 世袭制取代禅让 启死 五子争权 历经太康失国 后羿代夏 少康中兴事件 末期至 桀 内政不修外患不断 商汤征讨于鸣条 夏朝亡
历时 起始年代 都城 今地 470 公元前2070─1600年 安邑 山西夏县 商 商汤 子姓名履 其始祖契曾辅佐大禹 封于商地 汤王灭夏桀 建商朝 盘庚迁都于殷 故又称殷朝 殷墟著名出土文物 甲骨文 司母戊鼎 四羊方尊
历时 起始年代 都城 今地 550 公元前1601─1046年 毫 河南商丘 周 周文王之子周武王讨伐殷纣于牧野 纣自焚鹿台 周都镐京 施行 【分封亲戚以藩屏周】 公元前841年出现共和行政 史称共和元年 公元前206年覆
西周 周朝东迁之前史称西周 历12王 至公元前771年 宣王之子幽王被犬戎人杀于骊山之下 西周灭亡 【烽火戏诸侯】
历时 起始年代 都城 今地 275 公元前1046─771年 镐京 陕西西安 东周 幽王太子宣臼由镐京迁周都于洛邑 史称为东周</description>
    </item>
    
    <item>
      <title>Nginx - 1 - 单页面静态网站配置</title>
      <link>https://terryren.github.io/posts/web/nginx/nginx-1/</link>
      <pubDate>Fri, 10 Mar 2023 17:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/web/nginx/nginx-1/</guid>
      <description>刷新页面，默认重定向到Index.html
静态目录(static)，找不到默认404
server { listen 8080; server_name localhost; client_max_body_size 10m; client_header_buffer_size 256k; large_client_header_buffers 4 256k; root /opt/vue; location /faq { default_type text/html; return 200 &amp;#39;&amp;lt;!--faq--&amp;gt;&amp;#39;; } location /static/ { try_files \$uri \$uri =404; } location / { add_header Cache-Control &amp;#39;no-cache&amp;#39;; try_files \$uri \$uri /index.html; } } 附加问题
400 Bad Request Request Header Or Cookie Too Large
Nginx配置不当可能导致的安全问题
React部署于Nginx环境中刷新后404解决方案</description>
    </item>
    
    <item>
      <title>开篇之作</title>
      <link>https://terryren.github.io/posts/my-dao-post/</link>
      <pubDate>Wed, 01 Mar 2023 10:00:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/my-dao-post/</guid>
      <description>为人
至真 至善 至美 处事
道 (本质论)
道生一、一生二、二生三、三生万物 法 (方法论)
术之根本 术 (技术论)
闻道有先后、术业有专攻 器 (工具论)
工欲善其事、必先利其器 势
顺势: 顺应行业发展 造势: 引领行业发展 志
目标导向 </description>
    </item>
    
  </channel>
</rss>
