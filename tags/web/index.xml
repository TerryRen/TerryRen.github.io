<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on The Sound of Music</title>
    <link>https://terryren.github.io/tags/web/</link>
    <description>Recent content in Web on The Sound of Music</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Terry</copyright>
    <lastBuildDate>Mon, 26 Aug 2024 13:56:00 +0800</lastBuildDate><atom:link href="https://terryren.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>APISIX - 2 - 网关优化</title>
      <link>https://terryren.github.io/posts/web/nginx/apisix-2/</link>
      <pubDate>Mon, 26 Aug 2024 13:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/web/nginx/apisix-2/</guid>
      <description>前置条件 已安装 Docker，Docker Compose 用于部署 etcd 和 APISIX 已安装 curl，用于验证 APISIX 是否安装成功 采用 APISIX 的 3.2.2 LTS 长期支持版本，APISIX Dashboard 的 3.0.0 版本，etcd 的 3.5.11 版本 配置 APISIX 固定 IP 桥接模式 配置 APISIX 绑定到 443 &amp;amp; 80 端口；
安装 1. 下载文件 初始化相关配置，添加 apisix-dashboard 配置文件夹 dashboard_conf 以及文件
cd ~ git clone https://github.com/apache/apisix-docker.git cd apisix-docker/example mkdir dashboard_conf cd ~ cp apisix-docker/all-in-one/apisix-dashboard/conf.yaml apisix-docker/example/dashboard_conf mkdir apisix cp -r apisix-docker/example/* apisix rm -rf apisix-docker 2. apisix-dashboard 注意修改 conf.</description>
    </item>
    
    <item>
      <title>APISIX - 1 - 网关搭建</title>
      <link>https://terryren.github.io/posts/web/nginx/apisix-1/</link>
      <pubDate>Thu, 01 Feb 2024 13:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/web/nginx/apisix-1/</guid>
      <description>前置条件 已安装 Docker，Docker Compose 用于部署 etcd 和 APISIX 已安装 curl，用于验证 APISIX 是否安装成功
安装 1. 下载文件 初始化相关配置，添加apisix-dashboard配置文件夹以及文件
cd ~ git clone https://github.com/apache/apisix-docker.git cd apisix-docker/example mkdir dashboard_conf cd ~ cp apisix-docker/all-in-one/apisix-dashboard/conf.yaml apisix-docker/example/dashboard_conf mkdir apisix cp -r apisix-docker/example/* apisix rm -rf apisix-docker 2. apisix-dashboard 注意修改conf.etcd.endpoints为apisix可访问的地址
dashboard_conf/config.yaml，内容如下：
# # Licensed to the Apache Software Foundation (ASF) under one or more # contributor license agreements. See the NOTICE file distributed with # this work for additional information regarding copyright ownership.</description>
    </item>
    
    <item>
      <title>密码学 - 数字证书</title>
      <link>https://terryren.github.io/posts/web/crypto/certification/</link>
      <pubDate>Sat, 14 Oct 2023 13:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/web/crypto/certification/</guid>
      <description>PKI 公开密钥基础建设（Public Key Infrastructure），是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书， 从而建立一个安全的网络环境，数字证书最常见的格式有X.509，X.509又称之为PKIX。 在计算机界，有各种密码学标准，它们表示了如何在计算机中计算、存储、传输（等）各种算法，这些标准由 RSA、IEFT、PKIX、ITU-T、ISO 等标准组织机构编写, CA中心普遍采用的规范是X.509系列和PKCS系列
CA 证书颁发机构
CSR 证书签名请求
CRL 证书吊销列表
OCSP 在线证书状态协议
PKCS 公钥私钥加密-密码学标准（Public Key Cryptography Standards, PKCS），此一标准的设计与发布皆由 RSA 资讯安全公司（英语：RSA Security）所制定 包括了证书申请、证书更新、证书作废表发布、扩展证书内容以及数字签名、数字信封的格式等方面的一系列相关协议。它定义了一系列从PKCS#1到PKCS#15的标准
pkcs1 PKCS #1，RSA Cryptography Standard，定义了RSA Public Key和Private Key数学属性和格式，详见RFC8017 定义了RSA的数理基础、公/私钥格式，以及加/解密、签/验章的流程。1.5版本曾经遭到攻击
openssl genrsa -out key.pem Private Key Format
-----BEGIN RSA PRIVATE KEY----- BASE64Encoded -----END RSA PRIVATE KEY----- Public Key Format
-----BEGIN RSA PUBLIC KEY----- BASE64Encoded -----END RSA PUBLIC KEY----- pkcs7 参见RFC 2315。规范了以公开密钥基础设施（PKI）所产生之签名/密文之格式。其目的一样是为了拓展数字证书的应用。 其中，包含了S/MIME与CMS。 主要用来存储签名或者加密后的数据,如证书或者CRL。 PKCS7可以用二进制的DER格式存储，也可以使用PEM格式存储。Windows中PKCS7通常使用.p7b文件扩展名</description>
    </item>
    
    <item>
      <title>Nginx - 1 - 单页面静态网站配置</title>
      <link>https://terryren.github.io/posts/web/nginx/nginx-1/</link>
      <pubDate>Fri, 10 Mar 2023 17:56:00 +0800</pubDate>
      
      <guid>https://terryren.github.io/posts/web/nginx/nginx-1/</guid>
      <description>刷新页面，默认重定向到Index.html
静态目录(static)，找不到默认404
server { listen 8080; server_name localhost; client_max_body_size 10m; client_header_buffer_size 256k; large_client_header_buffers 4 256k; root /opt/vue; location /faq { default_type text/html; return 200 &amp;#39;&amp;lt;!--faq--&amp;gt;&amp;#39;; } location /static/ { try_files \$uri \$uri =404; } location / { add_header Cache-Control &amp;#39;no-cache&amp;#39;; try_files \$uri \$uri /index.html; } } 附加问题
400 Bad Request Request Header Or Cookie Too Large
Nginx配置不当可能导致的安全问题
React部署于Nginx环境中刷新后404解决方案</description>
    </item>
    
  </channel>
</rss>
